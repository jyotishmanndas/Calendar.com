// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  username      String?  @unique
  email         String?  @unique
  password      String?
  about         String?
  emailVerified DateTime

  events         Event[]
  availabilities Availability[]
  bookings       Bookings[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Availability {
  id   String @id @default(cuid())
  name String

  dayavailabilities dayAvailability[]
  events            Event[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model dayAvailability {
  id       String   @id @default(cuid())
  days     WeekDays
  fromTime String
  tillTime String
  isActive Boolean  @default(true)

  availabilityId String
  availability   Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([availabilityId, days])
}

model Event {
  id                String    @id @default(cuid())
  title             String
  url               String    @unique
  description       String?
  duration          Int
  active            Boolean   @default(true)
  videoCallProvider videoCall @default(GoogleMeet)

  bookings Bookings[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  availabilityId String
  availability   Availability @relation(fields: [availabilityId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookings {
  id            String   @id @default(cuid())
  name          String
  email         String
  fromTime      DateTime
  tillTime      DateTime
  mettingLink   String
  googleEventId String

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum WeekDays {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum videoCall {
  GoogleMeet
  Zoom
  Teams
}
